mean(mpg_toyota$cty)
t2<-mpg %>% filter(displ>=5)
mean(t1$hwy)
mean(t2$hwy)
#columm 만 추출
exam %>% select(math) # math 추출
exam %>% select(-math) # math col만 빼고 추출
#select와 filter를 같이 사용 가능
exam %>% filter(class == 1) %>% select(english)
# 일부만 출력하기
exam %>%
select(id, math) %>% # id, math 추출
head # 앞부분 6 행까지 추출
# 일부만 출력하기
exam %>%
select(id, math) %>% # id, math 추출
head(10) # 앞부분 6 행까지 추출
mpg<-as.data.frame(ggplot2::mpg)
mpg %>%
select(class, cty)
clear()
mpg %>%
select(class, cty)
mpg<-mpg %>%
select(class, cty)
#Q2.
mpg %>% filter(class=="suv")
#Q2.
t1<-mpg %>% filter(class=="suv")
t2<-mpg %>% filter(class=="compact")
mean(t1$cty)
mean(t2$cty)
c1
c1<-c(1:10)
c1
c2<-c(1:10, 2)
c2
c2<-seq(1:10, by=2)
c2<-seq(1, 10, by=2)
c2
str1<-c("hi", "R World")
str1
sum(c1)
a1<-sum(c1)
a1
mean(c1)
max(c1)
p1<-paste(str1, collapse='')
p1
p1<-paste(str1, collapse=' ')
p1
#>  df1 변수에 위와 같은 데이터를 갖는 데이터 프레임을 생성하세요.
df1 <- data.frame(productId = c(10, 20, 30, 40),
productName = c("smTV", "lgTv", "sonyTv", "pTv"),
price = c(1000000, 900000, 500000, 700000))
df1
df1
mean(df1$price)
#>  위 데이터 프레임에서 가격 최대값을 출력하세요.
max(df1$price)
#>  위 데이터 프레임에서 가격 최대값을 출력하세요.
max(df1$price)
#>  위 데이터 프레임을 product.csv 파일로 저장하세요.
write.csv(df1, file = "product.csv")
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
product<-load("product.rda")
product
df1
product
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product<-
product
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
product<-load("product.rda")
product
df2
#>df2 변수가 저장한 데이터프레임이 몇행 몇열인지 출력하시요.
df2<-read.csv("product.csv")
dim(df2)
#>df2 변수가 저장한 데이터프레임의 요약(summary) 정보를 출력하세요.
summary(df2)
#>1월 상품 가격을 10%할인하려고 한다. janDiscount컬럼을 10%할인된 가격으로 추가하세요.
df2$janDiscount=(df2$price)*0.9
df2
#>mtcars  변수에 데이터 프레임이 존재한다.  출력하여 데이터 확인
library(ggplot2)    # 시각화 함수 임포트
mtcars<-as.data.frame(ggplot2::mtcars)
mtcarss
mtcars
#>mtcars  변수에 데이터 프레임이 존재한다.  출력하여 데이터 확인
mtcars
#>mtcars$gear 의 값 빈도 수를  숫자로 출력하세요.
table(mtcars$gear)
#>mtcars$gear 의 값 빈도 그래프를 출력하세요. (qplot함수)
hist(mtcars$gear)
#>mtcars$gear 의 값 빈도 그래프를 출력하세요. (qplot함수)
library(ggplot2)
qplot(mtcars$gear)
#>mtcars$mpg 값이 15이상이면 Y, 이하이면 N인 값을 갖는 pass 컬럼을 추가하세요.
mtcars %>% filter(mpg>=15, Y, N)
#>mtcars$mpg 값이 15이상이면 Y, 이하이면 N인 값을 갖는 pass 컬럼을 추가하세요.
mtcars$pass <- ifelse(mtcars$mpg >= 15, "Y", "N")
mtcars
#mtcars 데이터프레임으로 다음 문제를 푸세요.
#> vs 컬럼 값이 1인 행만  출력
mtcars %>% filter(vs==1)
#> vs 컬럼 값이 1이 아닌 행만  출력
mtcars %>% filter(vs!=1)
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행만 출력
mtcars %>% filter(wt>=3 & vs==1)
#>  carb 컬럼 값이 2이거나 vs가 1인 행만 출력
mtcars %>% filter(carb==2 | vs==1)
#>  carb 컬럼 값이 1이거나 2이거나 3인 행만 출력
mtcars %>% filter(carb %in% c(1,2,3))
#>  mpg, cyl 컬럼만 출력
mtcars %>% select(mpg, cvl)
#>  mpg, cyl 컬럼만 출력
mtcars %>% select(mpg, cvl)
#>  mpg, cyl 컬럼만 출력
mtcars %>% select(mpg, cyl)
#>  mpg, cyl 컬럼만 빼고  출력
mtcars %>% select(-mpg, -cyl)
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의 mpg, cyl 컬럼만 빼고 출력
mtcars %>% filter(wt>=3&vs==1) %>%
select(-mpg, -cvl)
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의 mpg, cyl 컬럼만 빼고 출력
mtcars %>% filter(wt>=3&vs==1) %>%
select(-mpg, -cyl)
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의 mpg, cyl 컬럼만 빼고 출력
mtcars %>% filter(wt>=3&vs==1) %>%
select(-mpg, -cyl)
#>  mpg, cyl 컬럼만   5개 행만 출력
mtcars %>%
select(-mpg, -cyl) %>%
head(5)
#> wt 컬럼을 기준으로 정렬 하여 모두 출력
mtcars %>% arrange(wt)
product
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
product<-load("product.rda")
product
df1
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
product<-load("product.rda")
product
product
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product
#>  df1 변수에 위와 같은 데이터를 갖는 데이터 프레임을 생성하세요.
df1 <- data.frame(productId = c(10, 20, 30, 40),
productName = c("smTV", "lgTv", "sonyTv", "pTv"),
price = c(1000000, 900000, 500000, 700000))
df1
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product
rm(product)
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
product
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product1.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product1.rda")
product1
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product1.rda")
product1
product1.rad
#>  df1 변수에 위와 같은 데이터를 갖는 데이터 프레임을 생성하세요.
df1 <- data.frame(productId = c(10, 20, 30, 40),
productName = c("smTV", "lgTv", "sonyTv", "pTv"),
price = c(1000000, 900000, 500000, 700000))
df1
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product1.rda")
load
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product1.rda")
product1
product1
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product1.rda")
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product1.rda")
product1
rm(df1)
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product1.rda")
product1
df1
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product1.rda")
rm(df1)
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
rm(df1)
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
#>  df1 변수에 위와 같은 데이터를 갖는 데이터 프레임을 생성하세요.
df1 <- data.frame(productId = c(10, 20, 30, 40),
productName = c("smTV", "lgTv", "sonyTv", "pTv"),
price = c(1000000, 900000, 500000, 700000))
#> 위 데이터 프레임을 R 전용 파일인 "product.rda" 파일로 저장하세요.
save(df1, file = "product.rda")
rm(df1)
#>  product 변수에 "product.rda"  이 파일을 읽어서 데이터 프레임으로 저장하세요.
load("product.rda")
df1
getwd()
library(dplyr)
#> mpg 평균을 구하여 출력
mtcars %>% summarise(mean_mpg=mean(mpg))
#gear 별로  mpg 평균을 구하여 출력
mtcars %>%
group_by(gear) %>%
summarise(mean_mpg=mean(mpg))
#> gear 별로 행 갯수와   mpg 평균을 구하여 출력
mtcars %>%
group_by(gear) %>%
summarise(mean_mpg=mean(mpg), n=n())
#> gear 별로 행 갯수와   mpg 평균,mpg 합계, mpg 중앙값을 구하여 출력
mtcars %>%
group_by(gear) %>%
summarise(mean_mpg=mean(mpg),
sum_mpg=sum(mpg),
median_mpg=median(mpg),
n=n())
#> gear 별로 행 갯수와   mpg 평균,mpg 합계, mpg 중앙값을 구하여 출력 단,   mpg 평균 순으로 정렬하여 출력
mtcars %>%
group_by(gear) %>%
summarise(mean_mpg=mean(mpg),
sum_mpg=sum(mpg),
median_mpg=median(mpg),
n=n()) %>%
arrange(mean_mpg)
mtcars[1,]
#> 1 열만  출력
mtcars[,1]
#> 1행 1열만  출력
mtcars[1,1]
#> 1행 "mpg"열만  출력
mtcars[1,"mpg"]
#> 1행 "mpg"열만  출력
mtcars[1,mpg]
#> 1행 "mpg"열만  출력
mtcars[1,mpg]
#> 1행 "mpg"열만  출력
mtcars[1,"mpg"]
#> "mpg"열만  출력
mtcars[,"mpg"]
#> "mpg"열과 "cyl"열만  출력
mtcars[1,c(mpg, cvl)]
#> "mpg"열과 "cyl"열만  출력
mtcars[1,c("mpg", "cvl")]
#> "mpg"열과 "cyl"열만  출력
mtcars[,"mpg" & "cvl"]
#> "mpg"열과 "cyl"열만  출력
mtcars[,"mpg" , "cvl"]
#> "mpg"열과 "cyl"열만  출력
mtcars[,"mpg" , "cyl"]
#> "mpg"열과 "cyl"열만  출력
mtcars[,c("mpg" , "cyl")]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,mtcars$vs==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,mtcars$vs==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,vs==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,"vs"==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,"vs"==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[,mtcars$vs==1]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
library(dplyr)
mtcars[,mtcars$vs==1]
mtcars
mtcars[mtcars$vs==1,]
mtcars[mtcars$vs==1,]
#> vs 컬럼 값이 1인 행만  출력
#(참고 : mtcars %>% filter(vs==1) )
mtcars[mtcars$vs==1,]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의 mpg, cyl 컬럼만   출력
#(참고 : mtcars %>% select(mpg,cyl) %>%  filter(wt>=3 & vs==1 ) )
#또는 (참고 : mtcars %>% filter(wt>=3 & vs==1 ) %>%  select(mpg,cyl))
mtcars[mtcars$wt>=3 & mtcars$vs==1,"mpg", "cyl"]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의 mpg, cyl 컬럼만   출력
#(참고 : mtcars %>% select(mpg,cyl) %>%  filter(wt>=3 & vs==1 ) )
#또는 (참고 : mtcars %>% filter(wt>=3 & vs==1 ) %>%  select(mpg,cyl))
mtcars[mtcars$wt>=3 & mtcars$vs==1,c("mpg", "cyl")]
test1 <- data.frame(gear =  c(1, 2, 3, 4, 5),
loc = c("울산공장", "서울공장", "부산공장", "포항공장", "경기공장"))
new_mtcars <- left_join(mtcars, test1, by = "gear")
new_mtcars
test2 <- data.frame(gear =  c(6,7),
loc = c("제주공장","거제도공장"))
test2 <- data.frame(gear =  c(6,7),
loc = c("제주공장","거제도공장"))
new_gear <- bind_rows(test1, test2)
new_gear
emp<-read.csv("emp.csv")
dept<-read.csv("dept.csv")
emp
total<-left_join(emp, dept, by="deptno")
total
dept
#2. emp데이터프레임에서 deptno 별로 평균급여(sal)을 구하세요. 단, 급여가 많은 순으로 출력됩니다.
emp %>%
group_by(deptno) %>%
summarise(mean_sal=mean(sal)) %>%
arrange(desc(mean_sal))
#> vs 컬럼 값이 1이 아닌 행만  출력
#(참고 : mtcars %>% filter(vs!=1)  )
mtcars[mtcars$vs!=1, ]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행만 출력
#(참고 : mtcars %>% filter(wt>=3 & vs==1 ) )
mtcars[mtcars$wt>=3 & mtcars$vs==1, ]
#>  carb 컬럼 값이 2이거나 vs가 1인 행만 출력
#(참고 : mtcars %>% filter(carb==2 | vs==1 ) )
mtcars[mtcars$carb==2 | mtcars$vs==1, ]
#>  carb 컬럼 값이 1이거나 2인 행만 출력
#(참고 : mtcars %>% filter(carb %in% c(1,2  ) ) )
mtcars[mtcars$carb==1 | mtcars$carb==2, ]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의
#mpg, cyl 컬럼만,   5개 행 출력
#(참고 : mtcars %>%
#  filter(wt>=3 & vs==1 ) %>%
#  select(mpg,cyl) %>%
#  head(5)
mtcars[mtcars$wt>=3 & mtcars$vs==1, c("mpg", "cyl")]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의
#mpg, cyl 컬럼만,   5개 행 출력
#(참고 : mtcars %>%
#  filter(wt>=3 & vs==1 ) %>%
#  select(mpg,cyl) %>%
#  head(5)
mtcars[mtcars$wt>=3 & mtcars$vs==1 & 1:5, c("mpg", "cyl")]
#>  wt 컬럼 값이 3이 이상이고 vs가 1인 행의
#mpg, cyl 컬럼만,   5개 행 출력
#(참고 : mtcars %>%
#  filter(wt>=3 & vs==1 ) %>%
#  select(mpg,cyl) %>%
#  head(5)
mtcars<-mtcars[mtcars$wt>=3 & mtcars$vs==1, c("mpg", "cyl")]
mtcars
mtcars[1:5,]
emp<-read.csv("emp.csv")
emp<-read.csv("emp.csv")
# 1. emp 에는 comm 컬럼은 결측치가 있습니다.
#    comm 컬럼  결측치가 총 몇 건이 있는 지 출력하세요.
table(is.na(emp$comm))
# 2. emp의 comm 컬럼의 결측치를 빼고 평균을 구하세요.
mean(emp$comm, na.rm=T)
emp
# 3. emp의 comm 컬럼의 결측치를 빼고
#   job별 평균을 구하세요.
emp %>%
group_by(job) %>%
summarise(mean_job=mean(comm, na.rm=T))
# 3. emp의 comm 컬럼의 결측치를 빼고
#   job별 평균을 구하세요.
emp %>%
group_by(job) %>%
summarise(mean_job=mean(comm, na.rm=T))
# 4. emp의 comm 컬럼의 결측치를 빼고
#   job별 평균과, 합과 중앙값을 구하세요.
emp %>%
group_by(job) %>%
summarise(mean_job=mean(comm, na.rm=T),
sum_job=sum(comm, na.rm=T),
median_job=median(comm, na.rm=T)
)
emp$comm<-ifelse(emp$comm==NaN, 0,emp$comm)
emp
emp<-read.csv("emp.csv")
# 5. emp의 comm 컬럼의 결측치를  0으로
#    대체하고 comm 컬럼의 총합을 구하세요
emp
emp$comm<-ifelse(emp$comm==NA, 0,emp$comm)
emp
# 5. emp의 comm 컬럼의 결측치를  0으로
#    대체하고 comm 컬럼의 총합을 구하세요
emp
emp<-read.csv("emp.csv")
# 5. emp의 comm 컬럼의 결측치를  0으로
#    대체하고 comm 컬럼의 총합을 구하세요
emp
emp$comm<-ifelse(is.na(emp$comm), 0,emp$comm)
emp
table(is.na(emp$comm))
sum(emp$comm)
# 6. emp의 sal 값으로 상자그림을 그리세요.
boxplot(emp$sal)
# 7. emp의 sal 값으로 상자그림 통계치를 출력하세요.
boxplot(emp$sal)$stats
library(dplyr)
# 6. emp의 sal 값으로 상자그림을 그리세요.
boxplot(emp$sal)
# 7. emp의 sal 값으로 상자그림 통계치를 출력하세요.
boxplot(emp$sal)$stats
# 8. emp의 sal 값으로 상자그림 통계치를 통하여 정상영역에서
#    벗어나는 극단치를 찾아 NA로 값을 바꾸어 줍니다.
emp$sal <- ifelse(emp$sal < 800 | emp$sal > 5000, NA, emp$sal)
# 9. emp의 sal 값으로 결측치(NA)를 빼고
#    평균을 구합니다.
emp
# 9. emp의 sal 값으로 결측치(NA)를 빼고
#    평균을 구합니다.
emp %>%
summarize(mean_sal=mean(sal, na.rm=T))
# 10. emp의 sal 값으로 결측치(NA)를 빼고
#     deptno 별로 평균을 구합니다.  (단, sal평균이 높은 deptno가 먼저 출력되도록 )
emp %>%
group_by(deptno) %>%
summarize(mean_sal=mean(sal, na.rm=T))
# 10. emp의 sal 값으로 결측치(NA)를 빼고
#     deptno 별로 평균을 구합니다.  (단, sal평균이 높은 deptno가 먼저 출력되도록 )
emp %>%
group_by(deptno) %>%
summarize(mean_sal=mean(sal, na.rm=T)) %>%
arrange(desc(mean_sal))
# 문제 폴더에 주어진 emp.csv 파일을 데이터프레임으로 읽은 후 다음 문제를 푸세요.
emp<-read.csv("emp.csv")
library(ggplot2)
#산점도 그래프를 그리세요. x = job y = sal
ggplot(data=emp, aes(x=job, y=sal))
#산점도 그래프를 그리세요. x = job y = sal
ggplot(data=emp, aes(x=job, y=sal)) + geom_point()
emp
#산점도 그래프를 그리세요. x = hire_year  단 2000년 이후에 입사한 사원만 y = sal
ggplot(data=emp, aes(x=hire_year, y=sal)) + geom_point() + ylim(2000, 2020)
# 문제 폴더에 주어진 emp.csv 파일을 데이터프레임으로 읽은 후 다음 문제를 푸세요.
emp<-read.csv("emp.csv")
#산점도 그래프를 그리세요. x = hire_year  단 2000년 이후에 입사한 사원만 y = sal
ggplot(data=emp, aes(x=hire_year, y=sal)) + geom_point() + ylim(2000, 2020)
#산점도 그래프를 그리세요. x = hire_year  단 2000년 이후에 입사한 사원만 y = sal
ggplot(data=emp, aes(x=hire_year, y=sal)) + geom_point() + ylim(2000, 2020)
#산점도 그래프를 그리세요. x = job y = sal
ggplot(data=emp, aes(x=job, y=sal)) + geom_point()
# 직종별(job) 별로 사원 수를 빈도 막대 그래프로 그리세요.
ggplot(data=emp, aes(x=job)) + geom_bar()
emp
# 직종별(job) 별로 평균 급여(sal)을 구한 후 막대 그래프를 그리세요.(단, 급여가 많은 순으로 )
ggplot(data=emp, aes(x=hire_year, y=sal)) + geom_point() + ylim(2000, 2020)
# 직종별(job) 별로 평균 급여(sal)을 구한 후 막대 그래프를 그리세요.(단, 급여가 많은 순으로 )
emp_t<-emp %>%
group_by(job) %>%
summarize(mean_sal=mean(sal))
# 직종별(job) 별로 평균 급여(sal)을 구한 후 막대 그래프를 그리세요.(단, 급여가 많은 순으로 )
library(dplyr)
emp_t<-emp %>%
group_by(job) %>%
summarize(mean_sal=mean(sal))
emp_t
emp_t
emp
ggplot(data=emp_t, aes(x=job, y=mean_sal)) + geom_() + ylim(2000, 2020)
ggplot(data=emp_t, aes(x=job, y=mean_sal)) + geom_col()
# 직종별(job) 별로 사원 수를 빈도 막대 그래프로 그리세요.
ggplot(data=emp, aes(x=job)) + geom_bar()
# 입사년도(hire_date) 별로 사원 수를 구한 후, 시계열 그래프를 그리세요. (년도별 입사자 수 추이 확인)
ggplot(data = emp, aes(x = hire_year, y = unemploy)) + geom_line()
# 입사년도(hire_date) 별로 사원 수를 구한 후, 시계열 그래프를 그리세요. (년도별 입사자 수 추이 확인)
emp_t<-emp %>%
group_by(hire_year) %>%
summarize(num=n())
emp_t
ggplot(data = emp_t, aes(x = hire_year, y = num)) + geom_line()
ggplot(data=emp_t, aes(x=job, y=mean_sal)) + geom_col()
ggplot(data=emp_t, aes(x=job, y=mean_sal)) + geom_col()
emp_t<-emp %>%
group_by(job) %>%
summarize(mean_sal=mean(sal))
ggplot(data=emp_t, aes(x=job, y=mean_sal)) + geom_col()
# 5. emp의 comm 컬럼의 결측치를  0으로
#    대체하고 comm 컬럼의 총합을 구하세요
emp$comm<-ifelse(is.na(emp$comm), 0,emp$comm)
table(is.na(emp$comm))
sum(emp$comm)
# 6. emp의 sal 값으로 상자그림을 그리세요.
boxplot(emp$sal)
